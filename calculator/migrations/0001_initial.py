# Generated by Django 5.2.3 on 2025-08-04 15:46

import datetime
import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='LoanApplication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('applicant_name', models.CharField(default='Default Applicant', max_length=200)),
                ('applicant_email', models.EmailField(default='default@example.com', max_length=254)),
                ('loan_type', models.CharField(choices=[('mortgage', 'Mortgage Loan'), ('salary_backed', 'Salary-Backed Loan'), ('within_savings', 'Loan Within Savings'), ('daily_savings', 'Daily Savings Loan'), ('standing_order', 'Standing Order Loan'), ('real_estate', 'Real Estate Loan'), ('container', 'Container Loan'), ('agricultural', 'Agricultural Loan'), ('express', 'Express Loan'), ('business', 'Business Loan')], default='mortgage', max_length=50)),
                ('loan_amount', models.DecimalField(decimal_places=2, default=Decimal('1000000.00'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('annual_interest_rate_percent', models.DecimalField(decimal_places=2, default=Decimal('10.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('6.00')), django.core.validators.MaxValueValidator(Decimal('60.00'))])),
                ('loan_term_years', models.IntegerField(default=5, validators=[django.core.validators.MinValueValidator(1)])),
                ('borrower_gross_monthly_income', models.DecimalField(decimal_places=2, default=Decimal('150000.00'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('existing_monthly_debt_payments', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('submission_date', models.DateTimeField(auto_now_add=True)),
                ('appraisal_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('approved', models.BooleanField(blank=True, null=True)),
                ('reasons', models.JSONField(blank=True, default=list)),
                ('approver_comments', models.TextField(blank=True, null=True)),
                ('account_number', models.CharField(default='UNKNOWN', help_text="Applicant's MFI Account Number", max_length=50)),
                ('date_of_loan', models.DateField(default=datetime.date.today, help_text='The date the loan application is being processed.')),
                ('current_location', models.CharField(blank=True, help_text="Applicant's current geographical location.", max_length=255, null=True)),
                ('identity_card_number', models.CharField(blank=True, max_length=50, null=True)),
                ('place_of_birth', models.CharField(blank=True, max_length=100, null=True)),
                ('current_address', models.CharField(blank=True, max_length=255, null=True)),
                ('marital_status', models.CharField(blank=True, max_length=50, null=True)),
                ('duration_with_mfi_years', models.IntegerField(blank=True, default=0, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('num_loans_other_mfi', models.IntegerField(blank=True, default=0, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('profession', models.CharField(blank=True, max_length=100, null=True)),
                ('loan_purpose', models.TextField(blank=True, help_text='Describe the purpose of the loan.', null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='loan_applications', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AgriculturalLoanApplication',
            fields=[
                ('loanapplication_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='calculator.loanapplication')),
                ('is_land_personal_belonging', models.BooleanField(default=False, help_text='Is the land a personal belonging of the loan applicant?')),
                ('has_authorization_of_usage', models.BooleanField(default=False, help_text='If land is not personal, is there an authorization of usage?')),
                ('loan_purpose_category', models.CharField(blank=True, choices=[('crops', 'Crops (e.g., maize, cassava, cocoa)'), ('livestock', 'Livestock (e.g., cattle, poultry, pigs)')], help_text='Select the primary purpose of this agricultural loan.', max_length=50, null=True)),
                ('savings_balance_amount', models.DecimalField(blank=True, decimal_places=2, default=Decimal('0.00'), help_text='Current savings balance amount (XAF).', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('savings_balance_ge_1_5_loan', models.BooleanField(default=False, help_text='Is savings balance 1/5 or more (20%) of the loan amount? (System Verified)')),
                ('total_cost_estimate_document', models.FileField(blank=True, help_text='Upload the total cost estimate of products and inputs.', null=True, upload_to='agricultural_docs/cost_estimates/')),
                ('valid_proof_of_source_of_income', models.BooleanField(default=False, help_text='Is there valid proof of source of income? (System Verified)')),
            ],
            options={
                'verbose_name': 'Agricultural Loan Application',
                'verbose_name_plural': 'Agricultural Loan Applications',
            },
            bases=('calculator.loanapplication',),
        ),
        migrations.CreateModel(
            name='BusinessLoanApplication',
            fields=[
                ('loanapplication_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='calculator.loanapplication')),
                ('valid_source_of_income_for_repayment', models.BooleanField(default=False, help_text='A valid source of income for repayment is highly needed.')),
                ('land_documents_attached', models.FileField(blank=True, help_text='Copies of land documents attached.', null=True, upload_to='business_docs/land_documents/')),
                ('savings_balance_ge_20_percent_loan', models.BooleanField(default=False, help_text='Savings balance must be at least 20% of loan amount.')),
                ('cost_estimate_provided', models.BooleanField(default=False, help_text='The cost estimate of the things to purchase provided.')),
            ],
            options={
                'verbose_name': 'Business Loan Application',
                'verbose_name_plural': 'Business Loan Applications',
            },
            bases=('calculator.loanapplication',),
        ),
        migrations.CreateModel(
            name='ContainerLoanApplication',
            fields=[
                ('loanapplication_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='calculator.loanapplication')),
                ('bill_of_lading_document', models.FileField(blank=True, help_text='Upload a copy of the Bill of Lading.', null=True, upload_to='container_docs/bill_of_lading/')),
                ('custom_clearance_plan_document', models.FileField(blank=True, help_text='Upload the Custom Clearance Plan.', null=True, upload_to='container_docs/custom_clearance/')),
                ('savings_balance_amount', models.DecimalField(blank=True, decimal_places=2, default=Decimal('0.00'), help_text='Current savings balance amount (XAF).', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('savings_balance_ge_1_5_loan', models.BooleanField(default=False, help_text='Is savings balance 1/5 or more of the loan amount? (System Verified)')),
                ('valid_proof_of_source_of_income', models.BooleanField(default=False, help_text='Is there valid proof of source of income? (System Verified)')),
            ],
            options={
                'verbose_name': 'Container Loan Application',
                'verbose_name_plural': 'Container Loan Applications',
            },
            bases=('calculator.loanapplication',),
        ),
        migrations.CreateModel(
            name='DailySavingsLoanApplication',
            fields=[
                ('loanapplication_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='calculator.loanapplication')),
                ('daily_savings_active_ge_6_months', models.BooleanField(default=False)),
                ('signed_deduction_agreement_document', models.FileField(blank=True, null=True, upload_to='daily_savings_docs/deduction_agreements/')),
                ('valid_surety_bond_document', models.FileField(blank=True, null=True, upload_to='daily_savings_docs/surety_bonds/')),
                ('positive_loan_repayment_history', models.BooleanField(default=False)),
                ('savings_balance_ge_1_5_loan', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Daily Savings Loan Application',
                'verbose_name_plural': 'Daily Savings Loan Applications',
            },
            bases=('calculator.loanapplication',),
        ),
        migrations.CreateModel(
            name='ExpressLoanApplication',
            fields=[
                ('loanapplication_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='calculator.loanapplication')),
                ('salary_deducted_at_source_or_standing_order', models.BooleanField(default=False, help_text='Is salary deducted at source or is a standing order available?')),
                ('effective_service_available', models.BooleanField(default=False, help_text='Is a copy of effective service available?')),
                ('clearly_valid_purpose_of_loan', models.BooleanField(default=False, help_text='Is there a clearly and valid purpose for the loan?')),
                ('savings_balance_amount', models.DecimalField(blank=True, decimal_places=2, default=Decimal('0.00'), help_text='Current savings balance amount (XAF).', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('savings_balance_ge_1_10_loan', models.BooleanField(default=False, help_text='Is savings balance 1/10 or more (10%) of the loan amount? (System Verified)')),
                ('no_existing_delinquent_loan', models.BooleanField(default=False, help_text='Is there no existing delinquent loan? (System Verified)')),
            ],
            options={
                'verbose_name': 'Express Loan Application',
                'verbose_name_plural': 'Express Loan Applications',
            },
            bases=('calculator.loanapplication',),
        ),
        migrations.CreateModel(
            name='LoanWithinSavingsApplication',
            fields=[
                ('loanapplication_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='calculator.loanapplication')),
                ('savings_covers_loan_plus_interest', models.BooleanField(default=False)),
                ('loan_amount_blocked_in_savings', models.BooleanField(default=False)),
                ('no_active_default', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Loan Within Savings Application',
                'verbose_name_plural': 'Loan Within Savings Applications',
            },
            bases=('calculator.loanapplication',),
        ),
        migrations.CreateModel(
            name='MortgageLoanApplication',
            fields=[
                ('loanapplication_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='calculator.loanapplication')),
                ('legal_mortgage_agreement_document', models.FileField(blank=True, null=True, upload_to='mortgage_docs/legal_agreements/')),
                ('land_title_document', models.BooleanField(default=False, help_text='Does the borrower have a Land Title in their name?')),
                ('power_of_attorney_document', models.BooleanField(default=False, help_text='Is there a Power of Attorney (if applicable)?')),
                ('supporting_documents', models.TextField(blank=True, help_text='List supporting documents like Site Plan, Quotes, etc.', null=True)),
                ('no_existing_npl', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Mortgage Loan Application',
                'verbose_name_plural': 'Mortgage Loan Applications',
            },
            bases=('calculator.loanapplication',),
        ),
        migrations.CreateModel(
            name='RealEstateLoanApplication',
            fields=[
                ('loanapplication_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='calculator.loanapplication')),
                ('loan_duration_ge_10_years', models.BooleanField(default=False, help_text='Is the loan duration greater than or equal to 10 years?')),
                ('loan_amount_le_10_percent_paid_up_capital', models.BooleanField(default=False, help_text='Does the loan amount not exceed 10% of paid-up capital? (System Verified)')),
                ('legal_mortgage_agreement_document_re', models.FileField(blank=True, help_text='Scanned copy of the signed Legal Mortgage Agreement.', null=True, upload_to='real_estate_docs/legal_agreements/')),
                ('land_title_in_borrowers_name', models.BooleanField(default=False, help_text="Is the Land Title in the borrower's name? (System Verified)")),
                ('valid_proof_of_source_of_income', models.BooleanField(default=False, help_text='Is there valid proof of source of income? (System Verified)')),
            ],
            options={
                'verbose_name': 'Real Estate Loan Application',
                'verbose_name_plural': 'Real Estate Loan Applications',
            },
            bases=('calculator.loanapplication',),
        ),
        migrations.CreateModel(
            name='SalaryBackedLoanApplication',
            fields=[
                ('loanapplication_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='calculator.loanapplication')),
                ('salary_passing_union_ge_3_months', models.BooleanField(default=False)),
                ('copy_of_effective_service_document', models.FileField(blank=True, null=True, upload_to='salary_docs/effective_service/')),
                ('irrevocable_salary_transfer_document', models.FileField(blank=True, null=True, upload_to='salary_docs/transfer_docs/')),
                ('savings_ge_1_10_loan', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Salary-Backed Loan Application',
                'verbose_name_plural': 'Salary-Backed Loan Applications',
            },
            bases=('calculator.loanapplication',),
        ),
        migrations.CreateModel(
            name='StandingOrderLoanApplication',
            fields=[
                ('loanapplication_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='calculator.loanapplication')),
                ('standing_order_active_ge_3_months', models.BooleanField(default=False)),
                ('loan_duration_le_1_year', models.BooleanField(default=False)),
                ('savings_balance_ge_1_5_loan', models.BooleanField(default=False)),
                ('no_existing_default_or_delinquency', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Standing Order Loan Application',
                'verbose_name_plural': 'Standing Order Loan Applications',
            },
            bases=('calculator.loanapplication',),
        ),
    ]
